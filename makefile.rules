##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := MultiCacheSimulator MESI_SMPCache MSI_SMPCache

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

#SRCS = SMPCache.cpp MultiCacheSim.cpp CacheCore.cpp Snippets.cpp nanassert.cpp MultiCacheSim_PinDriver.cpp
#FACSRCS = MSI_SMPCache.cpp MESI_SMPCache.cpp

#OBJS = $(SRCS:$(OBJDIR)/%.cpp=$(OBJDIR)%.$(OBJ_SUFFIX))
#FACOBJS = $(FACSRCS:%.cpp=%.so)

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

TOOL_CXXFLAGS += -DPIN

$(OBJDIR)SMPCache$(OBJ_SUFFIX) : SMPCache.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)MultiCacheSim$(OBJ_SUFFIX) : MultiCacheSim.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)CacheCore$(OBJ_SUFFIX) : CacheCore.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)Snippets$(OBJ_SUFFIX) : Snippets.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)nanassert$(OBJ_SUFFIX) : nanassert.cpp
	$(CXX) -Wno-deprecated $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)MultiCacheSim_PinDriver$(OBJ_SUFFIX) : MultiCacheSim_PinDriver.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)MESI_SMPCache$(PINTOOL_SUFFIX) : MESI_SMPCache.cpp
	$(CXX) -fPIC -shared $(CXXFLAGS) -o $@ $< SMPCache.cpp Snippets.cpp nanassert.cpp

$(OBJDIR)MSI_SMPCache$(PINTOOL_SUFFIX) : MSI_SMPCache.cpp
	$(CXX) -fPIC -shared $(CXXFLAGS) -o $@ $< SMPCache.cpp Snippets.cpp nanassert.cpp

DEPS=$(OBJDIR)SMPCache$(OBJ_SUFFIX) $(OBJDIR)MultiCacheSim$(OBJ_SUFFIX) $(OBJDIR)CacheCore$(OBJ_SUFFIX) $(OBJDIR)Snippets$(OBJ_SUFFIX) $(OBJDIR)nanassert$(OBJ_SUFFIX) $(OBJDIR)MultiCacheSim_PinDriver$(OBJ_SUFFIX)

$(OBJDIR)MultiCacheSimulator$(PINTOOL_SUFFIX): $(DEPS)
	$(LINKER) $(TOOL_LDFLAGS) -shared $(DEPS) -o $(OBJDIR)MultiCacheSimulator$(PINTOOL_SUFFIX) $(TOOL_LPATHS) $(TOOL_LIBS)


